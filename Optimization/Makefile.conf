# =========================================================
# = Detect the target OS and the architecture (32/64 bits)=
# =========================================================

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
LOCAL_OS := LINUX
endif
ifeq ($(UNAME_S),Darwin)
LOCAL_OS := OSX
endif

# UNAME_P := $(shell uname -p)
# ifeq ($(UNAME_P),x86_64)
#     LOCAL_ARCH := AMD64
# endif
# ifneq ($(filter %86,$(UNAME_P)),)
#     LOCAL_ARCH := IA32
# endif

# =====================
# = Important folders =
# =====================

# Important folders for the project
SRC_FOLDER := src
INC_FOLDER := src
OUT_FOLDER := gen/out

# targets for generating the necessary folders
$(OUT_FOLDER):
	mkdir -p $(OUT_FOLDER)

# ==========================
# = Compiler configuration =
# ==========================

# compile command
ifeq ($(LOCAL_OS),OSX)
CCC := clang++
else
CCC := clang++
endif

# choose between release and debug mode #TODO improve this
# enable this during debug
CFLAGS = -O0 -g # debug mode
# CFLAGS = -O4 -DNDEBUG # release mode

# enable code relocation
CFLAGS += -fPIC
# use latest c++ standard
CFLAGS += -std=c++0x
# flag to specify a 64 bit architecture
CFLAGS += -DARCH_K8

# disable some deprecation warnings
CFLAGS += -Wno-deprecated
# add search path for current project
CFLAGS += -I$(INC_FOLDER) -I$(SRC_FOLDER)
# add search path for the optimization core classes
CFLAGS += -I../core/src

# ========================
# = Linker configuration =
# ========================

# linking command
LD := ld

ifeq ($(LOCAL_OS),LINUX)
# No external library is required, yet
else
# No external library is required, yet
endif
